import os
import json
from collections import defaultdict

# Directory containing the JSON reports
reports_dir = "vulnerability_reports"
output_dir = "vulnerability_reports/vulnerability_html_reports"
output_overview_file = os.path.join(output_dir, "home.html")

def create_individual_reports(report_details):
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    for image_name, vulnerabilities in report_details:
        html_content = f"""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Vulnerability Report for {image_name}</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f4f4f9; color: #333; }}
                table {{ width: 100%; border-collapse: collapse; margin-bottom: 20px; }}
                th, td {{ border: 1px solid #ddd; padding: 12px; text-align: left; }}
                th {{ background-color: #4CAF50; color: white; }}
                tr:nth-child(even) {{ background-color: #f2f2f2; }}
                tr:hover {{ background-color: #ddd; }}
                h1 {{ text-align: center; color: #4CAF50; }}
            </style>
        </head>
        <body>
            <h1>Vulnerability Report for {image_name}</h1>
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Package</th>
                        <th>Version</th>
                        <th>Severity</th>
                        <th>Description</th>
                        <th>Fix</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
        """

        for vuln in vulnerabilities:
            html_content += f"""
            <tr>
                <td>{vuln['id']}</td>
                <td>{vuln['package']}</td>
                <td>{vuln['version']}</td>
                <td>{vuln['severity']}</td>
                <td>{vuln['description']}</td>
                <td>{vuln['fix']}</td>
                <td>{vuln['fix_state']}</td>
            </tr>
            """

        html_content += """
                </tbody>
            </table>
        </body>
        </html>
        """

        report_file = os.path.join(output_dir, f"{image_name.replace(':', '_').replace('/', '_')}_report.html")
        with open(report_file, 'w') as file:
            file.write(html_content)
        print(f"Generated report for {image_name}: {report_file}")

def create_overview_report(severity_counts, fix_counts, report_details):
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    html_content = """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>All Docker Vulnerability Report Overview</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; background-color: #f4f4f9; color: #333; }
            table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
            th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }
            th { background-color: #4CAF50; color: white; }
            tr:nth-child(even) { background-color: #f2f2f2; }
            tr:hover { background-color: #ddd; }
            h1 { text-align: center; color: #4CAF50; }
            h2 { background-color: #4CAF50; color: white; padding: 10px; margin-top: 30px; }
        </style>
    </head>
    <body>
        <h1>All Docker Vulnerability Report Overview</h1>
        <table>
            <thead>
                <tr>
                    <th>Image Name</th>
                    <th>Critical</th>
                    <th>High</th>
                    <th>Medium</th>
                    <th>Low</th>
                    <th>Unknown</th>
                    <th>Fixed</th>
                    <th>Non-Fixed</th>
                    <th>Total</th>
                </tr>
            </thead>
            <tbody>
    """

    for image_name, counts in severity_counts.items():
        total = sum(counts.values())
        html_content += f"""
        <tr>
            <td><a href="{image_name.replace(':', '_').replace('/', '_')}_report.html">{image_name}</a></td>
            <td>{counts['Critical']}</td>
            <td>{counts['High']}</td>
            <td>{counts['Medium']}</td>
            <td>{counts['Low']}</td>
            <td>{counts['Unknown']}</td>
            <td>{fix_counts[image_name]['fixed']}</td>
            <td>{fix_counts[image_name]['non_fixed']}</td>
            <td>{total}</td>
        </tr>
        """

    html_content += """
            </tbody>
        </table>
    </body>
    </html>
    """

    with open(output_overview_file, 'w') as file:
        file.write(html_content)
    print(f"Generated overview report: {output_overview_file}")

def main():
    severity_counts = defaultdict(lambda: defaultdict(int))
    fix_counts = defaultdict(lambda: {"fixed": 0, "non_fixed": 0})
    report_details = []

    json_reports = []
    for json_file in os.listdir(reports_dir):
        if json_file.endswith(".json"):
            json_report = os.path.join(reports_dir, json_file)
            image_name = os.path.basename(json_report).replace('_', ':').replace('.json', '')
            json_reports.append((json_report, image_name))

    for json_report, image_name in json_reports:
        try:
            with open(json_report, 'r') as file:
                data = json.load(file)

            vulnerabilities = [
                {
                    "id": item["vulnerability"]["id"],
                    "package": item["artifact"]["name"],
                    "version": item["artifact"]["version"],
                    "severity": item["vulnerability"]["severity"],
                    "description": item["vulnerability"].get("description", "No description available"),
                    "fix": item["vulnerability"]["fix"]["versions"] if "fix" in item["vulnerability"] else "N/A",
                    "fix_state": item["vulnerability"]["fix"].get("state", "not_fixed") if "fix" in item["vulnerability"] else "not_fixed"
                }
                for item in data["matches"]
            ]

            for vuln in vulnerabilities:
                severity_counts[image_name][vuln["severity"]] += 1
                if vuln["fix_state"] == "fixed":
                    fix_counts[image_name]["fixed"] += 1
                else:
                    fix_counts[image_name]["non_fixed"] += 1

            report_details.append((image_name, vulnerabilities))
        except Exception as e:
            print(f"Error processing {json_report}: {e}")

    create_overview_report(severity_counts, fix_counts, report_details)
    create_individual_reports(report_details)

if __name__ == "__main__":
    main()
