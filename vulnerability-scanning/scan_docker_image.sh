#!/bin/bash

# Function to check if grype is installed
check_grype_installed() {
    if ! command -v grype &> /dev/null; then
        echo "grype is not installed."
        read -p "Do you want to install grype? (yes/no): " response
        if [[ "$response" == "yes" ]]; then
            echo "Installing grype..."
            if curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sudo sh -s -- -b /usr/local/bin; then
                echo "grype installed successfully."
                read -p "Do you want to continue with vulnerability scanning? (yes/no): " scan_response
                if [[ "$scan_response" != "yes" ]]; then
                    echo "Exiting script."
                    exit 0
                fi
            else
                echo "Failed to install grype. Please follow the steps from https://github.com/anchore/grype to install manually."
                exit 1
            fi
        else
            echo "grype installation skipped. Exiting script."
            exit 1
        fi
    else
        echo "grype is already installed."
    fi
}

# Function to check if python3 is installed
check_python3_installed() {
    if ! command -v python3 &> /dev/null; then
        echo "python3 is not installed. Exiting script."
        exit 1
    else
        echo "python3 is installed."
    fi
}

# Check if grype is installed
check_grype_installed

# Load Docker images from file
images_file="docker_images.txt"

if [[ ! -f "$images_file" ]]; then
    echo "Docker images file ($images_file) not found! Exiting script."
    exit 1
fi

mapfile -t images < "$images_file"

# Create a directory to store the reports
mkdir -p vulnerability_reports

# Loop through each image and run grype
for image in "${images[@]}"; do
    echo "Scanning image: $image"
    report_file="vulnerability_reports/$(echo $image | tr '/' '_' | tr ':' '_').json"
    grype $image -o json > $report_file
    echo "Report generated: $report_file"
done

echo "Vulnerability scanning completed for all images."

# Ask the user if they want to create HTML reports
read -p "Do you want to create HTML reports? (yes/no): " create_html_response
if [[ "$create_html_response" == "yes" ]]; then
    # Check if python3 is installed
    check_python3_installed
    
    # Convert JSON reports to HTML
    python3 generate_report.py
else
    echo "Exiting script without generating HTML reports."
    exit 0
fi
